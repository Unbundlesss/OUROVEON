<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="absl::InlinedVector&lt;*&gt;">
    <Intrinsic Name="_size" Expression="storage_.metadata_.value >> 1"/>
    <Intrinsic Name="_is_allocated" Expression="(storage_.metadata_.value &amp; 1) == 1"/>
    <Intrinsic Name="_inlined_data" Expression="($T1*)storage_.data_.inlined.inlined_data"/>
    <Intrinsic Name="_allocated_data" Expression="storage_.data_.allocated.allocated_data"/>
    <DisplayString>{{ size={ _size() }}}</DisplayString>
    <Expand>
      <Item Name="[capacity]" ExcludeView="simple" Condition="!_is_allocated()">$T2</Item>
      <Item Name="[capacity]" ExcludeView="simple" Condition="_is_allocated()">storage_.data_.allocated.allocated_capacity</Item>
      <Item Name="[N]" ExcludeView="simple">$T2</Item>
      <Item Name="[size]" ExcludeView="simple">_size()</Item>
      <Item Name="[is_allocated]" ExcludeView="simple">_is_allocated()</Item>
      <Item Name="[allocator]" ExcludeView="simple" Condition="_is_allocated()">storage_.metadata_</Item>
      <IndexListItems Condition="!_is_allocated()">
        <Size>_size()</Size>
        <ValueNode>_inlined_data()[$i]</ValueNode>
      </IndexListItems>
      <IndexListItems Condition="_is_allocated()">
        <Size>_size()</Size>
        <ValueNode>_allocated_data()[$i]</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>
    
  <!-- Should handle both flat hash_set and hash_map -->
  <Type Name="absl::container_internal::raw_hash_map&lt;*&gt;">
    <DisplayString Condition="settings_.value.size_ == 0">empty</DisplayString>
    <DisplayString>{{ size={settings_.value.size_} }}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">settings_.value.size_</Item>
      <Item Name="[capacity]" ExcludeView="simple">settings_.value.capacity_</Item>
      <CustomListItems MaxItemsPerView="5000">
        <Variable Name="nslot" InitialValue="0" />
        <Size>settings_.value.size_</Size>
        <Loop>
          <If Condition="settings_.value.control_[nslot] &gt;= 0">
            <Item>((($T1::slot_type*)settings_.value.slots_)[nslot]).key, ((($T1::slot_type*)settings_.value.slots_)[nslot]).value</Item>
          </If>
          <Exec>nslot++</Exec>
          <Break Condition="nslot == settings_.value.capacity_" />
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="absl::container_internal::FlatHashMapPolicy&lt;*&gt;">
    <DisplayString>{{ {value.first}:{value.second} }}</DisplayString>
    <Expand>
      <Item Name="[key]" ExcludeView="simple">value.first</Item>
      <Item Name="[value]" ExcludeView="simple">value.second</Item>
    </Expand>
  </Type>
  <Type Name="absl::Status">
    <Intrinsic Name="IsInlined" Expression="(rep_ &amp; 1) == 0" />
    <Intrinsic Name="IsMovedFrom" Expression="IsInlined() &amp;&amp; (rep_ &amp; 2) != 0" />
    <Intrinsic Name="StatusRep" Expression="(status_internal::StatusRep*)(rep_ - 1)" />
    <DisplayString Condition="IsMovedFrom()">empty</DisplayString>
    <DisplayString Condition="IsInlined()">{(absl::StatusCode)(rep_ >> 2)}</DisplayString>
    <DisplayString Condition="!IsInlined()">{(absl::StatusCode)StatusRep()->code} ({StatusRep()->message})</DisplayString>
    <Expand>
      <Item Name="code" Condition="IsInlined()">(absl::StatusCode)(rep_ >> 2)</Item>
      <Synthetic Name="message" Condition="IsInlined()">
        <DisplayString>empty</DisplayString>
      </Synthetic>
      <Item Name="code" Condition="!IsInlined()">(absl::StatusCode)StatusRep()->code</Item>
      <Item Name="message" Condition="!IsInlined()">StatusRep()->message</Item>
    </Expand>
  </Type>
</AutoVisualizer>
